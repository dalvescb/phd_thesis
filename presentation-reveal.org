* Header :ignore:
# -*- mode: org; -*-

#+REVEAL_ROOT: https://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_THEME: league

#+OPTIONS: reveal_title_slide:auto num:nil toc:nil timestamp:nil

#+MACRO: color @@html:<font color="$1">$2</font>@@
#+MACRO: alert @@html:<font color="lightblue">$1</font>@@

# #+REVEAL_EXTRA_CSS: /Users/curtis/reveal.js/css/theme/night.css

# To load Org-reveal, type “M-x load-library”, then type “ox-reveal”.


#+Title: Ph.d Proposal
#+Date: 2019-08-08
#+Email: curtis.dalves@gmail.com
#+Author: Curtis D'Alves

* Instruction Scheduling Intro

** Instruction Scheduling
  - Given a set of instructions and dependencies, designate an order 
    (find a {{{alert(schedule)}}}) satisfying the dependencies and optimizing performance
  - Known NP-Complete 
    Practically solved by
    - {{{alert(Heuristics)}}}
    - {{{alert(Approximation Algorithms)}}}

** COMMENT Testing
   #+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
   - Define Clustering
   - For Each Cluster i
   - Stochastic Penalty
   #+REVEAL_HTML: </div>
   #+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
   - $ x + 5 $
   #+REVEAL_HTML: </div>
** Types of Scheduling Algorithms
   - {{{alert(Basic Block:)}}} break code into blocks within branches (most commonly performed scheduling)
	 - {{{alert(Global Scheduling:)}}} schedule across basic block boundaries
	 - {{{alert(Modulo Scheduling:)}}} schedules basic blocks inside of a loop, seeking to
     optimize by interleaving iterations
	 - {{{alert(Trace Scheduling:)}}} tries to optimize control flow by predicting routes
     taken on branches

** Register Allocation
   - Given a schedule, assign registers keeping in mind
    - limited number of registers
    - can't rewrite a register until consumed by dependent instructions
   - Known NP-Complete
     - Practically solved using non-optimal {{{alert(Graph Coloring)}}} algorithms
     - done seperately from instruction scheduling (before or afterwords)

** Graph Colouring
   [[file:figures/nshape.png]]
   
   Find a {{{alert(k-Colouring)}}} for the dependency graph, where *$k = \#Registers$*

** Spilling
   - What if a {{{alert(k-Coloring)}}} can't be found? Must {{{alert(Spill)}}} memory
	 - Simply insert new {{{alert(Load / Store)}}} instructions as needed
   - Potentially {{{alert(creates new stalls)}}} in the pipeline, need to re-perform
     scheduling
   - May use up dispatch slots
   - An {{{alert(Ideal Schedule)}}} has no spilling
 
* Instruction Pipelining
** Classic RISC Pipeline
  [[file:figures/pipeline.png]]
  
 Simple example pipeline with no stalls and a single instruction fetch per
 "cycle"

** SuperScalar Pipelining
   #+ATTR_HTML: :width 50% :height 50%
   [[file:figures/superscaler.png]]
   
   Superscalar architectures can fetch multiple instructions per "cycle" and
   require more thought about resource restriction (such as limits on ALU's)

** Pipeline Stalls
   [[file:figures/bubbles.png]]
   [[file:figures/bubbles2.png]]
   
   An {{{alert(Ideal Schedule)}}} (like in the previous figures) contains *NO* stalls (often
   not possible)

** Hazards
		- {{{alert(Data Hazards)}}}
			- read after write {{{alert(RAW)}}}
			- write after read {{{alert(WAR)}}}
			- write after write {{{alert(WAW))}}}
		- {{{alert(Structural Hazards)}}} occurs when an aspect of hardware is accessed at the same time
		- {{{alert(Control Hazards)}}} caused by branching, next instruction unknown
    Hardware encountering hazards causees stalls in the pipeline

** Staging : Example 3 Staged Loop
   #+ATTR_HTML: :width 50% :height 50%
   [[file:figures/staging.png]]

   When performing {{{alert(modulo scheduling)}}}, a basic block of a loop can be broken
   into stages and the loop can be {{{alert(unrolled)}}} to interleave stages between
   iterations

** Iteration Interval
   TODO

** Register Remapping
   When executing machine code, hardware maps {{{alert(Logical Registers)}}} to {{{alert(Physical Registers)}}}
   -  {{{alert(Logical Registers)}}} are a set of registers usable directly when
     writing/generating assembly code (limited by system architecture)
   - {{{alert(Physical Registers)}}} are a set of registers actually available in hardware
   Having a larger number of Physical registers than Logical registers gives
   hardware extra flexibility when dispatching instructions for {{{alert(Out of Order Execution)}}}

** Out-Of-Order Dispatcher Example (IBM)
   #+BEGIN_SRC ditaa :file figures/hello-world.png
   /--------------\      /-------------\
   | Instr 0.     | ...  | Instr. n    |
   \--------------/      \-------------/
         |           |         |
   /--------------\      /-------------\
   | Fetcher 0.   | ...  | Fetcher n   |
   \--------------/      \-------------/
         |           |         |
         |           |         |
         \---------------------/
                     |
                     v
            /-----------------\
            | cBLU Grouper    |           Register Remapping
            \-----------------/
                     |
                     |
                     v 
            /-----------------\
            | cBLU Dispather  |
            \-----------------/
                     |
     -------------------------------------
     |      |                     |      |
   /----\ /----\               /----\ /----\
   |cRED| |cRED|     ....      |cRED| |cRED|    OoO Exection
   \----/ \----/               \----/ \----/
     |      |                     |      |
     -------------------------------------
                     |
                     v 
            /-----------------\
            | cBLU Retire     |           Register UnMapping
            \-----------------/
   #+END_SRC

   #+ATTR_HTML: :width 50% :height 50%
   #+RESULTS:
   [[file:figures/hello-world.png]]


   
* Previous Works
** List Scheduling (most commonly performed scheduling)
   	Simple heuristic.  Choose a prioritized topological order that
    - Respects the edges in the data-dependence graph (*topological*)
    - Heuristic choice among options, e.g pick first the node with the longest path extending from that node *prioritized*
    Most commonly used method for scheduling. Efficient but yields far less than
    optimal schedules

** Issues with List Scheduling
    - Many factors to consider when constructing a schedule (everything listed in this presentation and more!)    
    - Difficult (or more accurately impossible!) to consider all these aspects into a single choice heuristic        
    - Combinations of heuristics can be used, and multiple iterations performed,
      but each will usually undo the work of the other

* Previous Works Constraint Programming
** Optimial Basic Block Instruction Scheduling With Constraint Programming
   Malik,Mcinnesm,Beek (Waterloo,IBM).  Found provably optimal schedules for basic blocks using constraint
     programming, using the following types of constraints
   - {{{alert(Latency Constraints)}}}, i.e
     - Given a labeled dependency DAG $G = (N,E)$ 
       - $\forall (i,j) \in E \cdot j \geq i + l(i,j)$ 
   - {{{alert(Resource Constraints)}}} that ensured functinonal units were not exceded
   - {{{alert(Distance Contstraints)}}}, i.e
     - Given a labeled dependency *DAG*  $G = (N,E)$ 
        - $\forall (i,j) \in E \cdot j \geq i + d(i,j)$

** Optimial Basic Block Instruction Scheduling With Constraint Programming (Limitations)
   The hard constraints on latency would not account for {{{alert(Register Remapping)}}} in
   {{{alert(Out Of Order Execution)}}} that would be able to find more optimal schedules
   despite the fact that latencies in normal execution would create {{{alert(pipeline stalls)}}}
   #+begin_example
   fma r3,r3,r4
   fma r2,r2,r4
   fma r1,r1,r4
   fma r0,r0,r4
   #+end_example
   On a system with only 5 registers and an instruction fma of large enough
   latency, the scheduler would push these instructions apart. However a machine
   could use register remapping to execute these instructions efficiently *OoO*
   making that constraint unnecessary

* Previous Works Program Optimization Through Stochastic Search
** Program Optimization through Stochastic Search
  - Eric Schkufza, Rahul Sharma, Alex Aiken Stanford University
  - Suitable for {{{alert(Short Basic Block)}}} assembly code sequences
  - Utilizes a multiple pass {{{alert(Stochastic Algorithm)}}}
  - Encodes constraints as a {{{alert(Cost Function)}}} and uses a
    {{{alert(Markov Chain Monte Carlo Sampler)}}} to explore space of all
    possible schedules

** Program Optimization through Stochastic Search
   Each pass of the optimization minimizes the cost function
  \begin{equation*}
    cost(R; T) = w_e \times eq(R; T) + w_p \times perf(R; T)
  \end{equation*}
  | $\boldsymbol{R}$   | any rewrite of the program                    |
  | $\boldsymbol{T}$   | the input program sequence                    |
  | $eq(\cdot)$        | the equivalence function (0 if $R \equiv T$ ) |
  | $perf(\cdot)$      | a metric for performance                      |
  | $\boldsymbol{w_e}$ | weight for the equivalence term               |
  | $\boldsymbol{w_p}$ | weight for the performance term               |

** Program Optimization through Stochastic Search (Limitations)
   - Only optimizes basic blocks ({{{alert(no loops)}}})
   - Extremely innefficent (only practical for very short scheduling)
   - Performed in multiple passes with model checking
   - Cost function doesn't model the space of valid checking (hence model
     checking is required per each rewrite)

* Proposed Research

** Constrained Optimization Model For Modulo Scheduling

#+HTML: <small>
\begin{align*}
    \text{Objective Variables } & t_i, b_i, f_i:& \mathbb{R} \\
    \text{Constants } & \textrm{II} :& \mathbb{R} \\
    \text{Indicator Function } & \mathbb{IN} :& \mathbb{R} \rightarrow \mathbb{R} \\
    & t_i :& \text{dispatch time} \\
    & b_i :& \text{completion time} \\
    & f_i :& \text{FIFO use } 0 \leq f_i \leq 1 \\
    & \textrm{II} :& \text{iteration interval} \frac{\# instructions}{dispatches/cycle} \\
\end{align*}
#+HTML: </small>

** Constrained Optimization Model
#+HTML: <small>
\begin{align}
    \text{Hard Constraints } \qquad & \forall i,j \cdot i \rightarrow j \qquad t_i + \epsilon \leq t_j  \\
								 & 0 \leq t_i \leq b_i \leq \#\text{stages} \cdot \textrm{II}  \\
								 & b_i + \epsilon \leq t_i + \textrm{II} \\
    \text{Objective Function } \qquad   & \text{min} \sum_{i} (b_i - t_i + f_i) + \text{Penalties}
\end{align}    
#+HTML: </small>

{{{alert(Key Idea:)}}} Encode choice heuristics as penalties, adjust preference
between heuristics by scaling

** IO Penalty
   - {{{alert(IDEA)}}} penalize dispatch time of instructions based on the quantity and
    latencies of it's dependencies
   - {{{alert(Note)}}} This is a *penalty* not a *hard* constraint on latencies
#+HTML: <small>   
   \begin{align*}
            \text{Given } \qquad  & t_i,t_j \qquad & \forall i,j \mid i \rightarrow j  \\
            \text{For each i } \qquad & N_j  =  \sum_{i \rightarrow j} \text{latency}(j) & \\
            \qquad & \qquad & \qquad \\
            \qquad & \mathbb{IO}(i) = \sum_{j} \frac{1}{N_j} \mathbb{IN}(t_i - t_j) & \qquad 
    \end{align*}
#+HTML: </small>

** Stochastic Scaling
   - The scaling $\frac{1}{N_j}$ may be a good *guess*, but not necessarily effective in practice
   - {{{alert(IDEA)}}} scale the {{{alert(IO penalty)}}} stochastically
#+HTML: <small>
      \begin{align*}
          \text{Define a Clustering} \qquad & \mathbb{C} = \text{Cluster}(\forall i \mid i \rightarrow j) \\
          \text{For each Cluster i} \qquad & c_i \in \mathbb{RAND(R)} \\
          \text{Stochastic Penalty} \qquad & \sum_i c_i \cdot \mathbb{IO}(i)
        \end{align*}
#+HTML: </small>

** Schedule Topology
   {{{alert(Assertion)}}} For each scaling $c_i \in \mathbb{RAND(R)}$, there exists an $\epsilon \in
     \mathbb(R)$ such that $c_i + \epsilon$
   produces a distinct schedule from $c_i$
   - {{{alert(Questions)}}}
   - If the assertion fails, the clustering is useless (possible to avoid such
     clusterings?)
   - What does this topology look like?
   - Do all valid schedules span this topology?

** Topology Analysis
   - *TODO* prove stochastic scaling of spans the topology of all schedules
